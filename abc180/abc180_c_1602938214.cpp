/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author Kein Yukiyoshi
 */

#include "bits/stdc++.h"
#define int long long
#define rep(i, n)           for (int i = 0; i < (int)(n); i++)
#define REP(i, a, b)        for (int i = (int)(a); i < (int)(b); i++)
#define FOR(i, a)           for (auto &i : a)
#define ALL(obj)            begin(obj), end(obj)
#define MAX(x)              *max_element(ALL(x))
#define MIN(x)              *min_element(ALL(x))
#define SUM(x)              accumulate(ALL(x), 0LL)
#define LOWER_BOUND(A, key) distance(A.begin(), lower_bound(ALL(A), key))
#define UPPER_BOUND(A, key) distance(A.begin(), upper_bound(ALL(A), key))

using namespace std;
const int MOD    = (int)(1e9 + 7);
const int INF    = (int)(1e13 + 7);
const double EPS = 1e-14;
const double PI  = acos(-1);

int CEIL(int a, int b) { return (a >= 0 ? (a + (b - 1)) / b : (a - (b - 1)) / b); } //ceil() for int
int mod(int a, int b) { return a >= 0 ? a % b : a - (b * CEIL(a, b)); }             //always return positive num
int bpm(int a, int b) {                                                             //return x^y in order(log(y))
  int res = 1;
  for (a %= MOD; b; a = a * a % MOD, b >>= 1)
    if (b & 1) res = res * a % MOD;
  return res;
}

vector<int> prime_list;
void prime_factorization(int n) {
  while (n % 2 == 0) {
    n /= 2;
    prime_list.push_back(2);
  }
  for (int i = 3; i < (int)(sqrt((double)n)) + 2; i += 2)
    if (n % i == 0)
      while (n % i == 0) {
        n /= i;
        prime_list.push_back(i);
      }
  if (n != 1) prime_list.push_back(n);
}
void bfs(map<int, int> &ans, vector<int> &check, map<int, int> &num) {
  int temp = 1;
  int now  = 0;
  FOR(i, num) {
    rep(j, check[now]) {
      temp *= i.first;
    }
    now++;
  }
  ans[temp]++;
  now = 0;
  FOR(i, num) {
    if (check[now] + 1 <= i.second) {
      check[now]++;
      bfs(ans, check, num);
      check[now]--;
    }
    now++;
  }
}

class CCreamPuff {
public:
  static void solve(istream &cin, ostream &cout) {
    int N;
    cin >> N;
    prime_list = {};
    prime_factorization(N);
    map<int, int> ans;
    map<int, int> num;
    FOR(i, prime_list) { num[i]++; }
    int kinds = 0;
    FOR(i, num)
    kinds++;
    vector<int> check(kinds, 0);
    bfs(ans, check, num);
    FOR(i, ans) {
      cout << i.first << endl;
    }
  }
};


signed main() {
  cin.tie(0);
  cout.tie(0);
  ios_base::sync_with_stdio(false);
  cout<<fixed<<setprecision(15);
  CCreamPuff solver;
  std::istream& in(std::cin);
  std::ostream& out(std::cout);
  solver.solve(in, out);
  return 0;
}
