/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author Kein Yukiyoshi
 */

#include "bits/stdc++.h"
#define int long long
#define FOR(i, a, b) for (int i = (int)(a); i < (int)(b); i++)
#define rep(i, n) for (int i = 0; i < (int)(n); i++)
#define ALL(obj) begin(obj), end(obj)
#define MAX(x) *max_element(ALL(x))
#define MIN(x) *min_element(ALL(x))
#define LOWER_BOUND(A, key) distance(A.begin(), lower_bound(ALL(A), key))
#define UPPER_BOUND(A, key) distance(A.begin(), upper_bound(ALL(A), key))
#define Endl endl

using namespace std;
using ll      = long long;
const int MOD = (int)(1e9 + 7);
const int INF = (int)(1e13 + 7);

int ceil_(int a, int b) { return (a + (b - 1)) / b; }
int positive_surplus(int &a) { return (a + MOD) % MOD; }
int bpm(int x, unsigned int y) {
  if (x == 0) return 0;
  if (y == 0) return 1;
  int ans   = 1;
  int digit = (int)((log((double)y) / log((double)2) / 1 + 1));
  x %= MOD;
  for (int i = 0; i < digit; i++) {
    if (((y >> i) & 1u) == 1) ans = ans * x % MOD;
    x = x * x % MOD;
  }
  return ans;
}
template <class T>
void cumulative_sum(T &container) {
  for (int i = 0; i < container.size() - 1; i++) container[i + 1] += container[i];
}
class ECrestedIbisVsMonster {
public:
  static void solve(std::istream &cin, std::ostream &cout) {
    int H, N;
    cin >> H >> N;
    vector<vector<int>> dp(N + 1, vector<int>(H + 1, INF));
    vector<int> A(N);
    vector<int> B(N);
    rep(i, N) {
      cin >> A[i];
      cin >> B[i];
    }
    rep(i, N + 1) dp[i][0] = 0;
    rep(i, N) {
      rep(j, H) {
        if (j + 1 - A[i] >= 0) {
          dp[i + 1][j + 1] = min(dp[i][j + 1], dp[i + 1][j + 1 - A[i]] + B[i]);
        } else {
          dp[i + 1][j + 1] = dp[i][j + 1];
        }
      }
      rep(j, min(H, A[i])) {
        dp[i + 1][H] = min(dp[i + 1][H], dp[i][H - j - 1] + B[i]);
      }
    }
    cout << dp[N][H] << endl;
  }
};


signed main() {
  ECrestedIbisVsMonster solver;
  std::istream& in(std::cin);
  std::ostream& out(std::cout);
  solver.solve(in, out);
  return 0;
}
