/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author Kein Yukiyoshi
 */

#include "bits/stdc++.h"
#define int long long
#define FOR(i, a, b) for (int i = (int)(a); i < (int)(b); i++)
#define rep(i, n) for (int i = 0; i < (int)(n); i++)
#define ALL(obj) begin(obj), end(obj)
#define MAX(x) *max_element(ALL(x))
#define MIN(x) *min_element(ALL(x))
#define LOWER_BOUND(A, key) distance(A.begin(), lower_bound(ALL(A), key))
#define UPPER_BOUND(A, key) distance(A.begin(), upper_bound(ALL(A), key))

using namespace std;
using ll      = long long;
const int MOD = (int)(1e9 + 7);
const int INF = (int)(1e13 + 7);

template <class T = int>
int in() {
  T x;
  cin >> x;
  return x;
}
int bpm(int x, int y) {
  if (x == 0)
    return 0;
  else if (y == 0) {
    return 1;
  }
  int ans = 1;
  x %= MOD;
  int digit = (int)((log((double)y) / log((double)2) / 1 + 1));
  for (int i = 0; i < digit; i++) {
    if (((y >> i) & 1u) == 1) {
      ans *= x;
      ans %= MOD;
    }
    x = x * x;
    x %= MOD;
  }
  return ans;
}

class CLinearApproximation {
public:
  static void solve(std::istream &cin, std::ostream &cout) {
    int N;
    cin >> N;
    vector<int> A(N + 1, 0);
    vector<int> P(N + 1, 0);
    rep(i, N) {
      cin >> A[i + 1];
      A[i + 1] -= (i + 1);
      P[i + 1] = A[i+1];
    }
    sort(ALL(A));
    sort(ALL(P));
    rep(i, N) {
      A[i + 1] += A[i];
    }
    int sum = INF;
    FOR(i, -200000, 200001) {
      int sep = LOWER_BOUND(P, i);
      if (sep != 0 && sep != N) {
        sum = min(sum, ((A[N] - A[sep - 1]) - i * (N - sep + 1)) + (i * (sep - 1) - A[sep - 1]));
      } else if (sep == 0) {
        sum = min(sum, A[N] - i * N);
      }
    }
    cout << sum << endl;
  }
};


signed main() {
  CLinearApproximation solver;
  std::istream& in(std::cin);
  std::ostream& out(std::cout);
  solver.solve(in, out);
  return 0;
}