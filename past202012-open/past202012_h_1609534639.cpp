/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author Kein Yukiyoshi
 */

// clang-format off
//#pragma GCC optimize("Ofast")
//#pragma GCC target("avx")
#include <bits/stdc++.h>
using namespace std;
#define int long long
#define stoi stoll
#define Endl endl
#define itn int
#define fi first
#define se second
#define rep(i, n) for(int i=0, i##_len=(n); i<i##_len; i++)
#define rep2(i, a, b) for (int i = (int)(a), i##_len=(b); i < i##_len; i++)
#define rep3(i, a, b) for (int i = (int)(a), i##_len=(b); i >= i##_len; i--)
#define FOR(i, a) for (auto &i: a)
#define ALL(obj) begin(obj), end(obj)
#define _max(x) *max_element(ALL(x))
#define _min(x) *min_element(ALL(x))
#define _sum(x) accumulate(ALL(x), 0LL)

const int MOD   = 1000000007;
// const int MOD    = 998244353;
const int INF    = (int)(1e13 + 7);
const double EPS = 1e-8;
const double PI  = 3.14159265358979;
template <class T> using V = vector<T>;
template <class T> using VV = vector<vector<T>>;
template <class T> using VVV = vector<vector<vector<T>>>;
template <class T, class S>  using P = pair<T, S>;
template<class T> bool chmax(T &a, const T &b) {if (a < b) {a = b;return true;}return false;}
template<class T> bool chmin(T &a, const T &b) {if (b < a) {a = b;return true;}return false;}
int _ceil(int a, int b) { return (a >= 0 ? (a + (b - 1)) / b : (a - (b - 1)) / b); }
int _mod(int a) {return a >= 0 ? a % MOD : a - (MOD * _ceil(a, MOD));}
int _pow(int a, int b) {int res = 1;for (a %= MOD; b; a = a * a % MOD, b >>= 1)if (b & 1) res = res * a % MOD;return res;}
struct mint {long long x;mint(long long x = 0) : x((x % MOD + MOD) % MOD) {}mint operator-() const { return mint(-x); }mint &operator+=(const mint a) {if ((x += a.x) >= MOD) x -= MOD;return *this;}mint &operator-=(const mint a) {if ((x += MOD - a.x) >= MOD) x -= MOD;return *this;}mint &operator*=(const mint a) { (x *= a.x) %= MOD;return *this; }mint operator+(const mint a) const { return mint(*this) += a; }mint operator-(const mint a) const { return mint(*this) -= a; } mint operator*(const mint a) const { return mint(*this) *= a; }mint pow(long long t) const {if (!t) return 1;mint a = pow(t >> 1);a *= a;if (t & 1) a *= *this;return a;}mint inv() const { return pow(MOD - 2); }mint &operator/=(const mint a) { return *this *= a.inv(); }mint operator/(const mint a) const { return mint(*this) /= a; }};istream &operator>>(istream &is, mint &a) { return is >> a.x; }ostream &operator<<(ostream &os, const mint &a) { return os << a.x; }
// clang-format on

void func(int y, int x, V<string> &s, VV<bool> &possible, deque<P<int, int>> &pos, char which) {
  if (s[y][x] == '#' or possible[y][x]) return;
  if (s[y][x] != '.' and s[y][x] != which) return;
  possible[y][x] = true;
  pos.emplace_back(y, x);
}

class H {
public:
  static void solve(istream &cin, ostream &cout) {
    cin.tie(nullptr);
    cout.tie(nullptr);
    ios::sync_with_stdio(false);
    cout << fixed << setprecision(15);
    int H, W;
    cin >> H >> W;
    int r, c;
    cin >> r >> c;
    V<string> s(H + 2);
    s[0]     = string(W + 2, '#');
    s[H + 1] = string(W + 2, '#');
    rep(i, H) {
      cin >> s[i + 1];
      s[i + 1] = '#' + s[i + 1] + '#';
    }
    VV<bool> possible(H + 2, V<bool>(W + 2));
    deque<P<int, int>> pos = {{r, c}};
    possible[r][c]         = true;
    while (pos.size()) {
      int y = pos[0].fi, x = pos[0].se;
      pos.pop_front();
      func(y + 1, x, s, possible, pos, '^');
      func(y - 1, x, s, possible, pos,  'v');
      func(y, x + 1, s, possible, pos, '<');
      func(y, x - 1, s, possible, pos, '>');
    }
    V<string> ans(H);
    rep2(i, 1, H + 1) {
      rep2(j, 1, W + 1) {
        if (s[i][j] == '#') {
          ans[i - 1] += '#';
        } else if (possible[i][j]) {
          ans[i - 1] += 'o';
        } else {
          ans[i - 1] += 'x';
        }
      }
    }
    FOR(i, ans)
    cout << i << endl;
  }
};


signed main() {
  H solver;
  std::istream& in(std::cin);
  std::ostream& out(std::cout);
  solver.solve(in, out);
  return 0;
}
