/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author KY2001
 */


#include "bits/stdc++.h"
#define int long long
#define FOR(i, a, b) for (int i = (int)(a); i < (int)(b); i++)
#define rep(i, n) for (int i = 0; i < (int)(n); i++)
#define ALL(obj) begin(obj), end(obj)
#define Max(x) *max_element(ALL(x))
#define Min(x) *min_element(ALL(x))
#define Lower_bound(A, key) distance(A.begin(), lower_bound(ALL(A), key))
#define Upper_bound(A, key) distance(A.begin(), upper_bound(ALL(A), key))

using namespace std;
using ll = long long;
const int MOD = (int)(1e9 + 7);
const int INF = (int)(1e13 + 7);

int bpm(int x, int y) {
  if (x == 0)
    return 0;
  else if (y == 0) {
    return 1;
  }
  int ans = 1;
  x %= MOD;
  int digit = (int)((log((double)y) / log((double)2) / 1 + 1));
  for (int i = 0; i < digit; i++) {
    if (((y >> i) & 1u) == 1) {
      ans *= x;
      ans %= MOD;
    }
    x = x * x;
    x %= MOD;
  }
  return ans;
}

class CSugarWater {
public:
  int solve(std::istream &cin, std::ostream &cout) {
    int A, B, C, D, E, F;
    cin >> A >> B >> C >> D >> E >> F;
    double ans = 0;
    int ans_S = 0;
    int ans_W  = 0;
    vector<bool> S(3001);
    vector<bool> W(3001);
    FOR(i, 0, 3001){
      FOR(j, 0, 3001){
        if (100*A*i + 100*j*B <= 3000){
          W[100*A*i + 100*j*B] = true;
        }
      }
    }
    FOR(i, 0, 3001){
      FOR(j, 0, 3001){
        if (C*i+D*j<=3000){
          S[C*i+D*j] = true;
        }
      }
    }
    FOR(i, 1, 3001){
      FOR(j, 1, 3001){
            if (i+j<=F){
              if (S[i]&W[j]){
                if (100*i<=E*j){
                  if (ans < (double)i/(double)(i+j)){
                    ans = (double)i/(double)(i+j);
                    ans_S = i;
                    ans_W = j+i;
                  }
                }
              }
            }
      }
    }
    cout<<ans_W<<" "<<ans_S<<endl;
  }
};


signed main() {
	CSugarWater solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}
