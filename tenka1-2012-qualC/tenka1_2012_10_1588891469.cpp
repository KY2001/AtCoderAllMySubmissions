/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author Kein Yukiyoshi
 */

#include "bits/stdc++.h"
#define int long long
#define FOR(i, a, b) for (int i = (int)(a); i < (int)(b); i++)
#define rep(i, n) for (int i = 0; i < (int)(n); i++)
#define ALL(obj) begin(obj), end(obj)
#define MAX(x) *max_element(ALL(x))
#define MIN(x) *min_element(ALL(x))
#define LOWER_BOUND(A, key) distance(A.begin(), lower_bound(ALL(A), key))
#define UPPER_BOUND(A, key) distance(A.begin(), upper_bound(ALL(A), key))
#define Endl endl

using namespace std;
using ll      = long long;
const int MOD = (int)(1e9 + 7);
const int INF = (int)(1e13 + 7);

int ceil_(int a, int b) { return (a >= 0 ? (a + (b - 1)) / b : (a - (b - 1)) / b); }
int mod(int a, int b) { return a >= 0 ? a % b : a - (b * ceil_(a, b)); }
int bpm(int x, unsigned int y) {
  if (x == 0) return 0;
  if (y == 0) return 1;
  int ans   = 1;
  int digit = (int)((log((double)y) / log((double)2) / 1 + 1));
  x %= MOD;
  for (int i = 0; i < digit; i++) {
    if (((y >> i) & 1u) == 1) ans = ans * x % MOD;
    x = x * x % MOD;
  }
  return ans;
}
template <class T>
void cumulative_sum(T &container) {
  for (int i = 0; i < container.size() - 1; i++) container[i + 1] += container[i];
}

class B {
public:
  static void solve(std::istream &cin, std::ostream &cout) {
    string s;
    cin >> s;
    string mark   = "SHDC";
    string number = "A23456789#JQK";
    int S = 0, H = 0, D = 0, C = 0;
    int now = 0;
    while (true) {
      if (s[now + 1] == '1' or s[now + 1] == 'J' or s[now + 1] == 'Q' or s[now + 1] == 'K' or s[now + 1] == 'A') {
        if (s[now] == 'S') S++;
        if (s[now] == 'D') D++;
        if (s[now] == 'H') H++;
        if (s[now] == 'C') C++;
      }
      if (S == 5 or D == 5 or H == 5 or C == 5) break;
      if (s[now + 1] == '1') {
        now += 3;
      } else {
        now += 2;
      }
    }
    string ans{};
    char which;
    if (S == 5) which = 'S';
    if (D == 5) which = 'D';
    if (H == 5) which = 'H';
    if (C == 5) which = 'C';
    int now_temp = 0;
    while (now_temp != now) {
      if (s[now_temp] != which or (s[now_temp] == which and (s[now_temp + 1] != '1' and s[now_temp + 1] != 'J' and s[now_temp + 1] != 'Q' and s[now_temp + 1] != 'K' and s[now_temp + 1] != 'A'))) {
        if (s[now_temp + 1] == '1') {
          ans += s.substr(now_temp, 3);
          now_temp += 3;
        } else {
          ans += s.substr(now_temp, 2);
          now_temp += 2;
        }
      } else if (s[now_temp + 1] == '1') {
        now_temp += 3;
      } else {
        now_temp += 2;
      }
    }
    if (ans.size()) {
      cout << ans << endl;
    } else {
      cout << '0' << endl;
    }
  }
};


signed main() {
  B solver;
  std::istream& in(std::cin);
  std::ostream& out(std::cout);
  solver.solve(in, out);
  return 0;
}
