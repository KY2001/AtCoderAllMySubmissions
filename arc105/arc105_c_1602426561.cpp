/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author Kein Yukiyoshi
 */

#include "bits/stdc++.h"
#define int long long
#define rep(i, n)           for (int i = 0; i < (int)(n); i++)
#define REP(i, a, b)        for (int i = (int)(a); i < (int)(b); i++)
#define FOR(i, a)           for (auto &i : a)
#define ALL(obj)            begin(obj), end(obj)
#define MAX(x)              *max_element(ALL(x))
#define MIN(x)              *min_element(ALL(x))
#define SUM(x)              accumulate(ALL(x), 0LL)
#define LOWER_BOUND(A, key) distance(A.begin(), lower_bound(ALL(A), key))
#define UPPER_BOUND(A, key) distance(A.begin(), upper_bound(ALL(A), key))

using namespace std;
const int MOD    = (int)(1e9 + 7);
const int INF    = (int)(1e13 + 7);
const double EPS = 1e-14;
const double PI  = acos(-1);

int CEIL(int a, int b) { return (a >= 0 ? (a + (b - 1)) / b : (a - (b - 1)) / b); } //ceil() for int
int mod(int a, int b) { return a >= 0 ? a % b : a - (b * CEIL(a, b)); }             //always return positive num
int bpm(int a, int b) {                                                             //return x^y in order(log(y))
  int res = 1;
  for (a %= MOD; b; a = a * a % MOD, b >>= 1)
    if (b & 1) res = res * a % MOD;
  return res;
}

//最小値のquery
template <class T>
struct SegmentTree {
private:
  int n    = 1;
  int init = INF;
  vector<T> data;

public:
  SegmentTree(vector<T> &v) {
    while (n < v.size()) n *= 2;
    data.assign(2 * n - 1, init);
    for (int i = 0; i < v.size(); i++) data[i + n - 1] = v[i];
    for (int i = n - 2; i >= 0; i--) data[i] = min(data[2 * i + 1], data[2 * i + 2]);
  }
  T at(int ind) { return data[n - 1 + ind]; }
  T operator[](int ind) { return data[n - 1 + ind]; }
  void update(int ind, T val) {
    ind += n - 1;
    data[ind] = val;
    while (ind > 0) {
      ind       = (ind - 1) / 2;
      data[ind] = min(data[2 * ind + 1], data[2 * ind + 2]);
    }
  }
  T get_min(int L, int R, int k = 0, int l = 0, int r = -1) { //[L, R)
    if (r < 0) r = n;
    if (r <= L || R <= l) return init;
    if (L <= l and r <= R) return data[k];
    return min(get_min(L, R, 2 * k + 1, l, (l + r) / 2), get_min(L, R, 2 * k + 2, (l + r) / 2, r));
  }
};

class CCamelsAndBridge {
public:
  static void solve(istream &cin, ostream &cout) {
    int N, M;
    cin >> N >> M;
    vector<int> w(N);
    rep(i, N) cin >> w[i];
    vector<pair<int, int>> lv(M);
    rep(i, N) cin >> lv[i].first >> lv[i].second;
    sort(ALL(lv));
    vector<int> sorted_v(M);
    rep(i, M) sorted_v[i] = lv[i].second;
    SegmentTree<int> seg(sorted_v);
    int num = 0;
    int dis = 0;
    while (true) {
      int now = 0;
      rep(i, M) {
        int mini = seg.get_min(i, M);
        int maxi = -INF;
        rep(j, bpm(2, w.size())) {
          int temp = 0;
          rep(k, w.size()) {
            if ((j >> k) & 1 == 1) {
              temp += w[k];
            }
          }
          if (temp <= mini - now) {
            maxi = max(maxi, temp);
          }
        }
        if (maxi == -INF) continue;
        rep(j, bpm(2, w.size())) {
          int temp = 0;
          rep(k, w.size()) {
            if ((j >> k) & 1 == 1) {
              temp += w[k];
            }
          }
          if (temp == maxi) {
            now += temp;
            int temp2 = 0;
            rep(k, w.size() + temp2) {
              if ((j >> k) & 1 == 1) {
                w.erase(w.begin() + k - temp2);
                temp2 += 1;
              }
            }
            break;
          }
        }
        if (w.size() == 0 and i >= 1) {
          cout << dis + lv[i - 1].first << endl;
          return;
        } else if (w.size() == 0) {
          cout << dis << endl;
          return;
        }
      }
      dis += lv[M - 1].first;
      if (w.size() == num) {
        cout << -1 << endl;
        return;
      }
      num = w.size();
    }
  }
};


signed main() {
  cin.tie(0);
  cout.tie(0);
  ios_base::sync_with_stdio(false);
  cout<<fixed<<setprecision(15);
  CCamelsAndBridge solver;
  std::istream& in(std::cin);
  std::ostream& out(std::cout);
  solver.solve(in, out);
  return 0;
}
</pre>

			<h4>
				Submission Info
				
			</h4>
			
			<div class="panel panel-default"><table class="table table-bordered table-striped">
				<tr>
					<th class="col-sm-4">Submission Time</th>
					<td class="text-center"><time class='fixtime fixtime-second'>2020-10-11 23:29:21+0900</time></td>
				</tr>
				<tr>
					<th>Task</th>
					<td class="text-center"><a href="/contests/arc105/tasks/arc105_c">C - Camels and Bridge</a></td>
				</tr>
				<tr>
					<th>User</th>
					<td class="text-center"><a href="/users/KY2001">KY2001</a> <a href='/contests/arc105/submissions?f.User=KY2001'><span class='glyphicon glyphicon-search black' aria-hidden='true' data-toggle='tooltip' title='view KY2001's submissions'></span></a></td>
				</tr>
				<tr>
					<th>Language</th>
					<td class="text-center">C++ (GCC 9.2.1)</td>
				</tr>
				<tr>
					<th>Score</th>
					<td class="text-center">0</td>
				</tr>
				<tr>
					<th>Code Size</th>
					<td class="text-center">4315 Byte</td>
				</tr>
				<tr>
					<th>Status</th>
					<td id="judge-status" class="text-center"><span class='label label-warning' data-toggle='tooltip' data-placement='top' title="Wrong Answer">WA</span></td>
				</tr>
				
					<tr>
						<th>Exec Time</th>
						<td class="text-center">764 ms</td>
					</tr>
					<tr>
						<th>Memory</th>
						<td class="text-center">7696 KB</td>
					</tr>
				
			</table></div>

			
				<h4>Compile Error</h4>
				<pre>./Main.cpp: In static member function ‘static void CCamelsAndBridge::solve(std::istream&, std::ostream&)’:
./Main.cpp:90:30: warning: suggest parentheses around comparison in operand of ‘&’ [-Wparentheses]
   90 |             if ((j >> k) & 1 == 1) {
      |                            ~~^~~~
./Main.cpp:102:30: warning: suggest parentheses around comparison in operand of ‘&’ [-Wparentheses]
  102 |             if ((j >> k) & 1 == 1) {
      |                            ~~^~~~
./Main.cpp:110:32: warning: suggest parentheses around comparison in operand of ‘&’ [-Wparentheses]
  110 |               if ((j >> k) & 1 == 1) {
      |                              ~~^~~~
./Main.cpp:127:20: warning: comparison of integer expressions of different signedness: ‘std::vector<long long int>::size_type’ {aka ‘long unsigned int’} and ‘long long int’ [-Wsign-compare]
  127 |       if (w.size() == num) {
      |           ~~~~~~~~~^~~~~~
./Main.cpp: In instantiation of ‘SegmentTree<T>::SegmentTree(std::vector<_Tp>&) [with T = long long int]’:
./Main.cpp:79:34:   required from here
./Main.cpp:44:14: warning: comparison of integer expressions of different signedness: ‘long long int’ and ‘std::vector<long long int>::size_type’ {aka ‘long unsigned int’} [-Wsign-compare]
   44 |     while (n < v.size()) n *= 2;
./Main.cpp:46:23: warning: comparison of integer expressions of different signedness: ‘long long int’ and ‘std::vector<long long int>::size_type’ {aka ‘long unsigned int’} [-Wsign-compare]
   46 |     for (int i = 0; i < v.size(); i++) data[i + n - 1] = v[i];
