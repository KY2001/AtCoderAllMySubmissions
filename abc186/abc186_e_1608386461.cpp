/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author Kein Yukiyoshi
 */

// clang-format off
//#pragma GCC optimize("Ofast")
//#pragma GCC target("avx")
#include <bits/stdc++.h>
using namespace std;
#define int long long
#define stoi stoll
#define Endl endl
#define itn int
#define fi first
#define se second
#define rep(i, n) for(int i=0, i##_len=(n); i<i##_len; i++)
#define rep2(i, a, b) for (int i = (int)(a), i##_len=(b); i < i##_len; i++)
#define rep3(i, a, b) for (int i = (int)(a), i##_len=(b); i >= i##_len; i--)
#define FOR(i, a) for (auto &i: a)
#define ALL(obj) begin(obj), end(obj)
#define _max(x) *max_element(ALL(x))
#define _min(x) *min_element(ALL(x))
#define _sum(x) accumulate(ALL(x), 0LL)
#define LOWER_BOUND(A, key) distance(begin(A), lower_bound(ALL(A), key))
#define UPPER_BOUND(A, key) distance(begin(A), upper_bound(ALL(A), key))

int MOD   = 1000000007;
// const int MOD    = 998244353;
const int INF    = (int)(1e13 + 7);
const double EPS = 1e-8;
const double PI  = 3.14159265358979;
template <class T> using V = vector<T>;
template <class T> using VV = vector<vector<T>>;
template <class T> using VVV = vector<vector<vector<T>>>;
template <class T, class S>  using P = pair<T, S>;
template<class T> bool chmax(T &a, const T &b) {if (a < b) {a = b;return true;}return false;}
template<class T> bool chmin(T &a, const T &b) {if (b < a) {a = b;return true;}return false;}
int _ceil(int a, int b) { return (a >= 0 ? (a + (b - 1)) / b : (a - (b - 1)) / b); }
int _mod(int &a) {a = a >= 0 ? a % MOD : a - (MOD * _ceil(a, MOD));return a;}
int _pow(int a, int b) {int res = 1;for (a %= MOD; b; a = a * a % MOD, b >>= 1)if (b & 1) res = res * a % MOD;return res;}
struct mint {long long x;mint(long long x = 0) : x((x % MOD + MOD) % MOD) {}mint operator-() const { return mint(-x); }mint &operator+=(const mint a) {if ((x += a.x) >= MOD) x -= MOD;return *this;}mint &operator-=(const mint a) {if ((x += MOD - a.x) >= MOD) x -= MOD;return *this;}mint &operator*=(const mint a) { (x *= a.x) %= MOD;return *this; }mint operator+(const mint a) const { return mint(*this) += a; }mint operator-(const mint a) const { return mint(*this) -= a; } mint operator*(const mint a) const { return mint(*this) *= a; }mint pow(long long t) const {if (!t) return 1;mint a = pow(t >> 1);a *= a;if (t & 1) a *= *this;return a;}mint inv() const { return pow(MOD - 2); }mint &operator/=(const mint a) { return *this *= a.inv(); }mint operator/(const mint a) const { return mint(*this) /= a; }};istream &operator>>(istream &is, mint &a) { return is >> a.x; }ostream &operator<<(ostream &os, const mint &a) { return os << a.x; }
// clang-format on

inline long long mod(long long a, long long m) {
  long long res = a % m;
  if (res < 0) res += m;
  return res;
}

long long ext_gcd(long long a, long long b, long long &x, long long &y) {
  if (b == 0) {
    x = 1, y = 0;
    return a;
  }
  long long x2, y2;
  long long d = ext_gcd(b, a % b, x2, y2);
  x           = y2;
  y           = x2 - (a / b) * y2;
  return d;
}
// m を法としたときの a のモジュラ逆数を計算
long long mod_inv(long long a, long long m) {
  long long x, y;
  long long d = ext_gcd(a, m, x, y);
  if (d != 1) {
    // モジュラ逆数が存在しない
    return -1;
  }
  x %= m;
  if (x < 0) x += m; // 負の数の剰余を考慮
  return x;
}
long long garner(vector<long long> r, vector<long long> m) {
  int n            = r.size();
  long long m_prod = 1;           // m_prod には m[i] の積を入れていく
  long long x      = r[0] % m[0]; // 最初の条件を満たすような x の初期値
  for (int i = 1; i < n; i++) {
    m_prod *= m[i - 1]; // m の累積積を更新
    long long t = ((r[i] - x) * mod_inv(m_prod, m[i])) % m[i];
    if (t < 0) t += m[i]; // 負の数の剰余の対策
    x += t * m_prod;      // x を更新
  }
  return x;
}

class EThrone {
public:
  static void solve(istream &cin, ostream &cout) {
    cin.tie(nullptr);
    cout.tie(nullptr);
    ios::sync_with_stdio(false);
    cout << fixed << setprecision(15);
    int T;
    cin >> T;
    rep(_, T) {
      int N, S, K;
      cin >> N >> S >> K;
      int temp2 = gcd(gcd(S, K), N);
      N /= temp2;
      S /= temp2;
      K /= temp2;
      MOD      = N;
      int temp = (-S) % MOD;
      _mod(temp);
      if (temp % 2 == 1 and K % 2 == 0) {
        cout << -1 << endl;
      } else {
        temp *= mod_inv(K, MOD);
        _mod(temp);
        cout << temp << endl;
      }
    }
  }
};


signed main() {
  EThrone solver;
  std::istream& in(std::cin);
  std::ostream& out(std::cout);
  solver.solve(in, out);
  return 0;
}
