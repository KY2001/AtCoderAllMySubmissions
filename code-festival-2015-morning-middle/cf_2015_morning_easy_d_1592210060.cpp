/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author Kein Yukiyoshi
 */

#include "bits/stdc++.h"
#define int long long
#define rep(i, n)           for (int i = 0; i < (int)(n); i++)
#define REP(i, a, b)        for (int i = (int)(a); i < (int)(b); i++)
#define FOR(i, a)           for (auto &i : a)
#define ALL(obj)            begin(obj), end(obj)
#define MAX(x)              *max_element(ALL(x))
#define MIN(x)              *min_element(ALL(x))
#define sum(x)              accumulate(ALL(x), 0LL)
#define LOWER_BOUND(A, key) distance(A.begin(), lower_bound(ALL(A), key))
#define UPPER_BOUND(A, key) distance(A.begin(), upper_bound(ALL(A), key))

using namespace std;
const int MOD    = (int)(1e9 + 7);
const int INF    = (int)(1e13 + 7);
const double EPS = 1e-14;
const double PI  = acos(-1);

int CEIL(int a, int b) { return (a >= 0 ? (a + (b - 1)) / b : (a - (b - 1)) / b); } //ceil() for int
int mod(int a, int b) { return a >= 0 ? a % b : a - (b * CEIL(a, b)); }             //always return positive num
int bpm(int a, int b) {                                                             //return x^y in order(log(y))
  int res = 1;
  for (a %= MOD; b; a = a * a % MOD, b >>= 1)
    if (b & 1) res = res * a % MOD;
  return res;
}

class B {
public:
  static void solve(istream &cin, ostream &cout) {
    int N;
    cin >> N;
    string S;
    cin >> S;
    int ans = 0;
    rep(i, N - 1) {
      string S1 = S.substr(0, i + 1);
      string S2 = S.substr(i + 1, N);
      int n1    = S1.size();
      int n2    = S2.size();
      vector<vector<int>> dp(n1 + 10, vector<int>(n2 + 10, 0));
      rep(j, n1) {
        rep(k, n2) {
          if (S1[j] == S2[k]) {
            dp[j + 1][k + 1] = max(dp[j][k] + 1, max(dp[j][k + 1], dp[j + 1][k]));
          } else {
            dp[j + 1][k + 1] = max(dp[j][k + 1], dp[j + 1][k]);
          }
        }
      }
      ans = max(dp[n1][n2], ans);
    }
    cout << N - 2 * ans << endl;
  }
};


signed main() {
  cin.tie(0);
  cout.tie(0);
  ios_base::sync_with_stdio(false);
  cout<<fixed<<setprecision(15);
  B solver;
  std::istream& in(std::cin);
  std::ostream& out(std::cout);
  solver.solve(in, out);
  return 0;
}
