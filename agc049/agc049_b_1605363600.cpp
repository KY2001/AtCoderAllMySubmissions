/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author Kein Yukiyoshi
 */

#include <bits/stdc++.h>
#define int long long
#define stoi                stoll
#define rep(i, n)           for (int i = 0; i < (int)(n); i++)         // [0, b)
#define rep2(i, a, b)       for (int i = (int)(a); i < (int)(b); i++)  // [a, b)
#define rep3(i, a, b)       for (int i = (int)(a); i >= (int)(b); i--) // reversed [b, a] so [a, a-1, a-2, ..., b]
#define FOR(i, a)           for (auto &i : a)
#define ALL(obj)            begin(obj), end(obj)
#define MAX(x)              *max_element(ALL(x))
#define MIN(x)              *min_element(ALL(x))
#define SUM(x)              accumulate(ALL(x), 0LL)
#define LOWER_BOUND(A, key) distance(A.begin(), lower_bound(ALL(A), key))
#define UPPER_BOUND(A, key) distance(A.begin(), upper_bound(ALL(A), key))

using namespace std;
const int MOD    = 998244353;
const int MOD2   = 1000000007;
const int INF    = (int)(1e13 + 7);
const double EPS = 1e-14;
const double PI  = acos(-1);

int CEIL(int a, int b) { return (a >= 0 ? (a + (b - 1)) / b : (a - (b - 1)) / b); } //ceil() for int
int mod(int a, int b) { return a >= 0 ? a % b : a - (b * CEIL(a, b)); }             //always return positive num
int pow_mod(int a, int b) {                                                         //return x^y in order(log(y))
  int res = 1;
  for (a %= MOD; b; a = a * a % MOD, b >>= 1)
    if (b & 1) res = res * a % MOD;
  return res;
}

class BFlipDigits {
public:
  static void solve(istream &cin, ostream &cout) {
    cin.tie(nullptr);
    cout.tie(nullptr);
    ios::sync_with_stdio(false);
    cout << fixed << setprecision(15);
    int N;
    string S, T;
    cin >> N >> S >> T;
    int ans  = 0;
    int one1 = 0;
    int one2 = 0;
    if (S == T) {
      cout << 0 << endl;
      return;
    }
    rep(i, N) {
      if (S[i] == '1') one1++;
      if (T[i] == '1') one2++;
    }
    if (one1 < one2) {
      cout << -1 << endl;
      return;
    }
    if (abs(one1 - one2) % 2 == 1) {
      cout << -1 << endl;
      return;
    }
    map<int, int> check;
    rep(i, N) if (S[i] == '1') check[i]++;
    int first_one_T = N;
    rep(i, N) if (T[i] == '1') {
      first_one_T = i;
      break;
    }
    rep(i, N) {
      if (S[i] == '1' and i < first_one_T) {
        if (check.upper_bound(i) == end(check)) {
          cout << -1 << endl;
          return;
        }
        int ind = check.upper_bound(i)->first;
        ans += ind - i;
        S[i]   = '0';
        S[ind] = '0';
        check.erase(i);
        check.erase(ind);
      }
    }
    rep(i, N) {
      if (T[i] == '1' and S[i] != '1') {
        if (check.upper_bound(i) == end(check)) {
          cout << -1 << endl;
          return;
        }
        int ind = check.upper_bound(i)->first;
        ans += ind - i;
        S[ind] = '0';
        S[i]   = '1';
        check.erase(ind);
      } else if (S[i] == '1' and T[i] == '0') {
        if (check.upper_bound(i) == end(check)) {
          cout << -1 << endl;
          return;
        }
        int ind = check.upper_bound(i)->first;
        ans += ind - i;
        S[i]   = '0';
        S[ind] = '0';
        check.erase(i);
        check.erase(ind);
      }
    }
    if (S == T) {
      cout << ans << endl;
    } else {
      cout << -1 << endl;
    }
  }
};


signed main() {
  BFlipDigits solver;
  std::istream& in(std::cin);
  std::ostream& out(std::cout);
  solver.solve(in, out);
  return 0;
}
