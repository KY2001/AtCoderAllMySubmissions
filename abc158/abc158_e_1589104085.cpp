/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author Kein Yukiyoshi
 */

#include "bits/stdc++.h"
#define int long long
#define FOR(i, a, b) for (int i = (int)(a); i < (int)(b); i++)
#define rep(i, n) for (int i = 0; i < (int)(n); i++)
#define ALL(obj) begin(obj), end(obj)
#define MAX(x) *max_element(ALL(x))
#define MIN(x) *min_element(ALL(x))
#define LOWER_BOUND(A, key) distance(A.begin(), lower_bound(ALL(A), key))
#define UPPER_BOUND(A, key) distance(A.begin(), upper_bound(ALL(A), key))
#define Endl endl

using namespace std;
using ll      = long long;
const int MOD = (int)(1e9 + 7);
const int INF = (int)(1e13 + 7);

int ceil_(int a, int b) { return (a >= 0 ? (a + (b - 1)) / b : (a - (b - 1)) / b); }
int mod(int a, int b) { return a >= 0 ? a % b : a - (b * ceil_(a, b)); }
int bpm(int x, unsigned int y) {
  if (x == 0) return 0;
  if (y == 0) return 1;
  int ans   = 1;
  int digit = (int)((log((double)y) / log((double)2) / 1 + 1));
  x %= MOD;
  for (int i = 0; i < digit; i++) {
    if (((y >> i) & 1u) == 1) ans = ans * x % MOD;
    x = x * x % MOD;
  }
  return ans;
}
template <class T>
void cumulative_sum(T &container) {
  for (int i = 0; i < container.size() - 1; i++) container[i + 1] += container[i];
}
class EDivisibleSubstring {
public:
  static void solve(std::istream &cin, std::ostream &cout) {
    int N, P;
    string S;
    cin >> N >> P >> S;
    if (P == 2 or P == 5) {
      int ans = 0;
      rep(i, N) {
        if ((S[S.size() - 1 - i] - '0') % P == 0) {
          ans += (N - i);
        }
      }
      cout << ans << endl;
      return;
    }
    vector<int> cum_sum = {0};
    map<int, int> check;
    int now = 1;
    rep(i, N) {
      cum_sum.emplace_back((cum_sum[i] + (S[N - i - 1] - '0') * now) % P);
      now *= 10;
      now %= P;
    }
    rep(i, N + 1) {
      check[cum_sum[i]]++;
    }
    now     = 1;
    int ans = 0;
    rep(i, N) {
      check[cum_sum[i]]--;
      ans += check[cum_sum[i]];
      if (i >= 1) now = now * 10 % P;
    }
    cout << ans << endl;
  }
};

signed main() {
  EDivisibleSubstring solver;
  std::istream& in(std::cin);
  std::ostream& out(std::cout);
  solver.solve(in, out);
  return 0;
}
