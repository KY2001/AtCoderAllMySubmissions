/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author Kein Yukiyoshi
 */

#include "bits/stdc++.h"
#define int long long
#define rep(i, n)           for (int i = 0; i < (int)(n); i++)         // [0, b)
#define rep2(i, a, b)       for (int i = (int)(a); i < (int)(b); i++)  // [a, b)
#define rep3(i, a, b)       for (int i = (int)(a); i >= (int)(b); i--) // reversed [b, a] so [a, a-1, a-2, ..., b]
#define FOR(i, a)           for (auto &i : a)
#define ALL(obj)            begin(obj), end(obj)
#define MAX(x)              *max_element(ALL(x))
#define MIN(x)              *min_element(ALL(x))
#define SUM(x)              accumulate(ALL(x), 0LL)
#define LOWER_BOUND(A, key) distance(A.begin(), lower_bound(ALL(A), key))
#define UPPER_BOUND(A, key) distance(A.begin(), upper_bound(ALL(A), key))

using namespace std;
const int MOD    = (int)(998244353);
const int INF    = (int)(1e13 + 7);
const double EPS = 1e-14;
const double PI  = acos(-1);

int CEIL(int a, int b) { return (a >= 0 ? (a + (b - 1)) / b : (a - (b - 1)) / b); } //ceil() for int
int mod(int a, int b) { return a >= 0 ? a % b : a - (b * CEIL(a, b)); }             //always return positive num
int pow_mod(int a, int b) {                                                         //return x^y in order(log(y))
  int res = 1;
  for (a %= MOD; b; a = a * a % MOD, b >>= 1)
    if (b & 1) res = res * a % MOD;
  return res;
}

struct UnionFind {
  vector<int> d;
  UnionFind(int n = 0) : d(n, -1) {} //0からn-1
  int find(int x) { return (d[x] < 0 ? x : d[x] = find(d[x])); }
  bool unite(int x, int y) {
    x = find(x);
    y = find(y);
    if (x == y) return false;
    if (d[x] > d[y]) swap(x, y);
    d[x] += d[y];
    d[y] = x;
    return true;
  }
  bool same(int x, int y) { return find(x) == find(y); }
  int size(int x) { return -d[find(x)]; }
};

int factorial(int n) {
  int ret = 1;
  for (int i = 2; i <= n; i++) {
    ret *= i;
    ret %= MOD;
  };
  return ret;
}

class CShufflePermutation {
public:
  static void solve(istream &cin, ostream &cout) {
    int N, K;
    cin >> N >> K;
    vector<vector<int>> a(N, vector<int>(N));
    rep(i, N) {
      rep(j, N) {
        cin >> a[i][j];
      }
    }
    UnionFind uf1(N);
    UnionFind uf2(N);
    rep(i, N - 1) {
      rep2(j, i + 1, N) {
        rep(k, N) {
          if (a[i][k] + a[j][k] > K) {
            break;
          } else if (k == N - 1) {
            uf1.unite(i, j);
          }
        }
      }
    }
    rep(i, N - 1) {
      rep2(j, i + 1, N) {
        rep(k, N) {
          if (a[k][i] + a[k][j] > K) {
            break;
          } else if (k == N - 1) {
            uf2.unite(i, j);
          }
        }
      }
    }
    int one = 1;
    int two = 1;
    map<int, int> already;
    map<int, int> already2;
    rep(i, N) {
      int now = uf1.find(i);
      if (not already[now]) {
        one *= factorial(uf1.size(i));
        one %= MOD;
        already[now]++;
      }
      now = uf2.find(i);
      if (not already2[now]) {
        two *= factorial(uf2.size(i));
        two %= MOD;
        already2[now]++;
      }
    }
    cout << mod(one * two, MOD) << endl;
  }
};


signed main() {
  cin.tie(0);
  cout.tie(0);
  ios_base::sync_with_stdio(false);
  cout<<fixed<<setprecision(15);
  CShufflePermutation solver;
  std::istream& in(std::cin);
  std::ostream& out(std::cout);
  solver.solve(in, out);
  return 0;
}
