/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author Kein Yukiyoshi
 */

// clang-format off
#include <bits/stdc++.h>
//#pragma GCC optimize("Ofast")
//#pragma GCC target("avx")
#define int long long
using namespace std;
#define stoi stoll
#define fi first
#define se second
#define rep(i, n) for(int i=0, i##_len=(n); i<i##_len; i++)
#define rep2(i, a, b) for (int i = (int)(a), i##_len=(b); i < i##_len; i++)
#define rep3(i, a, b) for (int i = (int)(a), i##_len=(b); i >= i##_len; i--)
#define FOR(i, a) for (auto &i: a)
#define ALL(obj) begin(obj), end(obj)
#define _max(x) *max_element(ALL(x))
#define _min(x) *min_element(ALL(x))
#define _sum(x) accumulate(ALL(x), 0LL)

const int MOD   = 1000000007;
// const int MOD    = 998244353;
const int INF    = (int)(1e13 + 7);
const double EPS = 1e-8;
const double PI  = 3.14159265358979;
template <class T> using V = vector<T>;
template <class T> using VV = vector<vector<T>>;
template <class T> using VVV = vector<vector<vector<T>>>;
template <class T, class S>  using P = pair<T, S>;
template<class T> bool chmax(T &a, const T &b) {if (a < b) {a = b;return true;}return false;}
template<class T> bool chmin(T &a, const T &b) {if (b < a) {a = b;return true;}return false;}
int _ceil(int a, int b) { return (a >= 0 ? (a + (b - 1)) / b : (a - (b - 1)) / b); }
int _mod(int a) {return a >= 0 ? a % MOD : a - (MOD * _ceil(a, MOD));}
int _pow(int a, int b) {int res = 1;for (a %= MOD; b; a = a * a % MOD, b >>= 1)if (b & 1) res = res * a % MOD;return res;}
struct mint {long long x;mint(long long x = 0) : x((x % MOD + MOD) % MOD) {}mint operator-() const { return mint(-x); }mint &operator+=(const mint a) {if ((x += a.x) >= MOD) x -= MOD;return *this;}mint &operator-=(const mint a) {if ((x += MOD - a.x) >= MOD) x -= MOD;return *this;}mint &operator*=(const mint a) { (x *= a.x) %= MOD;return *this; }mint operator+(const mint a) const { return mint(*this) += a; }mint operator-(const mint a) const { return mint(*this) -= a; } mint operator*(const mint a) const { return mint(*this) *= a; }mint pow(long long t) const {if (!t) return 1;mint a = pow(t >> 1);a *= a;if (t & 1) a *= *this;return a;}mint inv() const { return pow(MOD - 2); }mint &operator/=(const mint a) { return *this *= a.inv(); }mint operator/(const mint a) const { return mint(*this) /= a; }};istream &operator>>(istream &is, mint &a) { return is >> a.x; }ostream &operator<<(ostream &os, const mint &a) { return os << a.x; }
// clang-format on

void func(int i, int j, V<string> &S, V<bool> &row, V<bool> &column, VV<int> &row2, VV<int> &column2) {
  row[i]    = true;
  column[j] = true;
  FOR(x, row2[i]) {
    if (!column[x]) {
      func(i, x, S, row, column, row2, column2);
    }
  }
  FOR(y, column2[j]) {
    if (!row[y]) {
      func(y, j, S, row, column, row2, column2);
    }
  }
}

class DSkate {
public:
  static void solve(istream &cin, ostream &cout) {
    cin.tie(nullptr);
    cout.tie(nullptr);
    ios::sync_with_stdio(false);
    cout << fixed << setprecision(15);
    int H, W;
    cin >> H >> W;
    V<string> S(H);
    rep(i, H) cin >> S[i];
    S[0][0]         = '#';
    S[H - 1][0]     = '#';
    S[0][W - 1]     = '#';
    S[H - 1][W - 1] = '#';
    V<bool> row(H);
    V<bool> column(W);
    VV<int> row2(H);
    VV<int> column2(W);
    rep(i, H) rep(j, W) if (S[i][j] == '#') {
      row2[i].emplace_back(j);
      column2[j].emplace_back(i);
    }
    func(0, 0, S, row, column, row2, column2);
    int ans = 0;
    while (1) {
      bool yes = false;
      rep(i, H) if (!row[i] and row2[i].size()) {
        func(i, row2[i][0], S, row, column, row2, column2);
        ans++;
        yes = true;
      }
      rep(j, W) if (!column[j] and column2[j].size()) {
        func(j, column2[j][0], S, row, column, row2, column2);
        yes = true;
        ans++;
      }
      if (!yes) break;
    }
    int ROW = 0, COL = 0;
    rep(i, H) if (!row[i]) ROW++;
    rep(j, W) if (!column[j]) COL++;
    cout << ans + min(ROW, COL) << endl;
  }
};


signed main() {
  DSkate solver;
  std::istream& in(std::cin);
  std::ostream& out(std::cout);
  solver.solve(in, out);
  return 0;
}
