/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author KY2001
 */


#include "bits/stdc++.h"
#define int long long
#define FOR(i, a, b) for (int i = (int)(a); i < (int)(b); i++)
#define rep(i, n) for (int i = 0; i < (int)(n); i++)
#define ALL(obj) begin(obj), end(obj)
#define MAX(x) *max_element(ALL(x))
#define MIN(x) *min_element(ALL(x))
#define LOWER_BOUND(A, key) distance(A.begin(), lower_bound(ALL(A), key))
#define UPPER_BOUND(A, key) distance(A.begin(), upper_bound(ALL(A), key))

using namespace std;
using ll      = long long;
const int MOD = (int)(1e9 + 7);
const int INF = (int)(1e13 + 7);

int bpm(int x, int y) {
  if (x == 0)
    return 0;
  else if (y == 0) {
    return 1;
  }
  int ans = 1;
  x %= MOD;
  int digit = (int)((log((double)y) / log((double)2) / 1 + 1));
  for (int i = 0; i < digit; i++) {
    if (((y >> i) & 1u) == 1) {
      ans *= x;
      ans %= MOD;
    }
    x = x * x;
    x %= MOD;
  }
  return ans;
}

class CTakahashisInformation {
public:
  int solve(std::istream &cin, std::ostream &cout) {
    vector<vector<int>> c(3, vector<int>(3));
    rep(i, 3) {
      rep(j, 3) {
        cin >> c[i][j];
      }
    }
    rep(a1, 101) {
      rep(a2, 101) {
        rep(a3, 101) {
          int b1, b2, b3;
          b1 = c[0][0] - a1;
          b2 = c[0][1] - a1;
          b3 = c[0][2] - a1;
          if (c[1][0] == a2 + b1 && c[1][1] == a2 + b2 && c[1][2] == a2 + b3 && c[2][0] == a3 + b1 && c[2][1] == a3 + b2 && c[2][2] == a3 + b3) {
            cout << "Yes" << endl;
            return 0;
          }
        }
      }
    }
    cout << "No" << endl;
  }
};


signed main() {
	CTakahashisInformation solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}
