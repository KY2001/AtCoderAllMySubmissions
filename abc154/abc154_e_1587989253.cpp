/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author Kein Yukiyoshi
 */

#include "bits/stdc++.h"
#define int long long
#define FOR(i, a, b) for (int i = (int)(a); i < (int)(b); i++)
#define rep(i, n) for (int i = 0; i < (int)(n); i++)
#define ALL(obj) begin(obj), end(obj)
#define MAX(x) *max_element(ALL(x))
#define MIN(x) *min_element(ALL(x))
#define LOWER_BOUND(A, key) distance(A.begin(), lower_bound(ALL(A), key))
#define UPPER_BOUND(A, key) distance(A.begin(), upper_bound(ALL(A), key))

using namespace std;
using ll      = long long;
const int MOD = (int)(1e9 + 7);
const int INF = (int)(1e13 + 7);

template <class T = int>
int in() {
  T x;
  cin >> x;
  return x;
}
int bpm(int x, int y) {
  if (x == 0)
    return 0;
  else if (y == 0) {
    return 1;
  }
  int ans = 1;
  x %= MOD;
  int digit = (int)((log((double)y) / log((double)2) / 1 + 1));
  for (int i = 0; i < digit; i++) {
    if (((y >> i) & 1u) == 1) {
      ans *= x;
      ans %= MOD;
    }
    x = x * x;
    x %= MOD;
  }
  return ans;
}

class EAlmostEverywhereZero {
public:
  static void solve(std::istream &cin, std::ostream &cout) {
    vector<vector<vector<int>>> dp(110, vector<vector<int>>(5, vector<int>(2, 0)));
    string S;
    int K;
    cin >> S >> K;
    dp[0][1][1] = max(0, (S[0] - '0') - 1);
    dp[0][1][0] = 1;
    rep(i, S.size() - 1) {
      dp[i + 1][1][1] += 9;
      rep(j, 4) {
        dp[i + 1][j + 1][1] += dp[i][j][1] * 9 + dp[i][j][0] * max(0, (S[i + 1] - '0' - 1));
        dp[i + 1][j][1] += dp[i][j][1] + (S[i + 1] == '0' ? 0 : dp[i][j][0]);
        dp[i + 1][j + 1][0] += (S[i + 1] == '0' ? 0 : dp[i][j][0]);
        dp[i + 1][j][0] += (S[i + 1] == '0' ? dp[i][j][0] : 0);
      }
    }
    cout << dp[S.size() - 1][K][0] + dp[S.size() - 1][K][1] << endl;
  }
};


signed main() {
  EAlmostEverywhereZero solver;
  std::istream& in(std::cin);
  std::ostream& out(std::cout);
  solver.solve(in, out);
  return 0;
}
