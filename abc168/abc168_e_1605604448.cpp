/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author Kein Yukiyoshi
 */

#include <bits/stdc++.h>
#define int long long
#define stoi                stoll
#define rep(i, n)           for (int i = 0; i < (int)(n); i++)         // [0, b)
#define rep2(i, a, b)       for (int i = (int)(a); i < (int)(b); i++)  // [a, b)
#define rep3(i, a, b)       for (int i = (int)(a); i >= (int)(b); i--) // reversed [b, a] so [a, a-1, a-2, ..., b]
#define FOR(i, a)           for (auto &i : a)
#define ALL(obj)            begin(obj), end(obj)
#define MAX(x)              *max_element(ALL(x))
#define MIN(x)              *min_element(ALL(x))
#define SUM(x)              accumulate(ALL(x), 0LL)
#define LOWER_BOUND(A, key) distance(A.begin(), lower_bound(ALL(A), key))
#define UPPER_BOUND(A, key) distance(A.begin(), upper_bound(ALL(A), key))

using namespace std;
const int MOD    = 1000000007;
const int INF    = (int)(1e13 + 7);
const double EPS = 1e-14;
const double PI  = acos(-1);

int CEIL(int a, int b) { return (a >= 0 ? (a + (b - 1)) / b : (a - (b - 1)) / b); } //ceil() for int
int mod(int a, int b) { return a >= 0 ? a % b : a - (b * CEIL(a, b)); }             //always return positive num
int pow_mod(int a, int b) {                                                         //return x^y in order(log(y))
  int res = 1;
  for (a %= MOD; b; a = a * a % MOD, b >>= 1)
    if (b & 1) res = res * a % MOD;
  return res;
}

template <class T> struct reduction { //reduction: 約分, O(log n) a/b
private:
  int gcd(int a, int b) { return (b ? gcd(b, a % b) : a); }

public:
  T first;
  T second;
  reduction(int a, int b) : first(a), second(b) { // a/b
    if (a == 0 and b == 0) {
      first = second = 0;
    } else {
      int GCD = gcd(abs(first), abs(second));
      first /= GCD;
      second /= GCD;
    }
  }
};

class EBullet {
public:
  static void solve(istream &cin, ostream &cout) {
    cin.tie(nullptr);
    cout.tie(nullptr);
    ios::sync_with_stdio(false);
    cout << fixed << setprecision(15);
    int N;
    cin >> N;
    map<pair<int, int>, int> I;
    map<pair<int, int>, int> J;
    vector<vector<pair<int, int>>> IJ(N);
    vector<int> zero(3, 0);
    rep(i, N) {
      int A, B;
      cin >> A >> B;
      if (A == 0 and B == 0) {
        zero[0]++;
      } else if (A == 0) {
        zero[1]++;
      } else if (B == 0) {
        zero[2]++;
      }
      reduction<int> rd(A, B);
      if ((A < 0 and B < 0) or (A >= 0 and B >= 0)) {
        I[{abs(rd.first), abs(rd.second)}]++;
        J[{-abs(rd.second), abs(rd.first)}]++;
        IJ[i] = {{abs(rd.first), abs(rd.second)}, {-abs(rd.second), abs(rd.first)}};
      } else {
        I[{-abs(rd.first), abs(rd.second)}]++;
        J[{abs(rd.second), abs(rd.first)}]++;
        IJ[i] = {{-abs(rd.first), abs(rd.second)}, {abs(rd.second), abs(rd.first)}};
      }
    }
    int ans = 1;
    int num = N - SUM(zero);
    ans *= (pow_mod(2, zero[1]) + pow_mod(2, zero[2]) - 1);
    ans %= MOD;
    rep(i, N) {
      int a = J[IJ[i][0]];
      int b = I[IJ[i][0]];
      if (IJ[i][0].first == 0) continue;
      if (IJ[i][0] == IJ[i][1]) {
        if (a) {
          ans *= (a + 1);
          ans %= MOD;
          num -= a;
          J[IJ[i][0]] = 0;
        }
      } else {
        if (a) {
          ans *= (pow_mod(2, a) + pow_mod(2, b) - 1);
          ans %= MOD;
          num -= a + b;
          J[IJ[i][0]] = 0;
          J[IJ[i][1]] = 0;
        }
      }
    }
    ans *= pow_mod(2, num);
    cout << mod(ans + zero[0] - 1, MOD) << endl;
  }
};


signed main() {
  EBullet solver;
  std::istream& in(std::cin);
  std::ostream& out(std::cout);
  solver.solve(in, out);
  return 0;
}
