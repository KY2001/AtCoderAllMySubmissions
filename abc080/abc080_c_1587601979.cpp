/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author KY2001
 */


#include "bits/stdc++.h"
#define int long long
#define FOR(i, a, b) for (int i = (int)(a); i < (int)(b); i++)
#define rep(i, n) for (int i = 0; i < (int)(n); i++)
#define ALL(obj) begin(obj), end(obj)
#define MAX(x) *max_element(ALL(x))
#define MIN(x) *min_element(ALL(x))
#define LOWER_BOUND(A, key) distance(A.begin(), lower_bound(ALL(A), key))
#define UPPER_BOUND(A, key) distance(A.begin(), upper_bound(ALL(A), key))

using namespace std;
using ll      = long long;
const int MOD = (int)(1e9 + 7);
const int INF = (int)(1e13 + 7);

int bpm(int x, int y) {
  if (x == 0)
    return 0;
  else if (y == 0) {
    return 1;
  }
  int ans = 1;
  x %= MOD;
  int digit = (int)((log((double)y) / log((double)2) / 1 + 1));
  for (int i = 0; i < digit; i++) {
    if (((y >> i) & 1u) == 1) {
      ans *= x;
      ans %= MOD;
    }
    x = x * x;
    x %= MOD;
  }
  return ans;
}

class CShoppingStreet {
public:
  int solve(std::istream &cin, std::ostream &cout) {
    int N;
    cin >> N;
    vector<vector<int>> F(N, vector<int>(10));
    rep(i, N) {
      rep(j, 10) {
        cin >> F[i][j];
      }
    }
    vector<vector<int>> P(N, vector<int>(11, 0));
    rep(i, N) {
      rep(j, 11) {
        cin >> P[i][j];
      }
    }
    int ans = -INF;
    rep(i, 1 << 10) {
      if (i == 0)
        i++;
      int temp_ans = 0;
      rep(j, N) {
        int num = 0;
        rep(k, 10) {
          if (F[j][k] && (i >> k) & 1) {
            num += 1;
          }
        }
        temp_ans += P[j][num];
      }
      ans = max(ans, temp_ans);
    }
    cout << ans << endl;
  }
};


signed main() {
	CShoppingStreet solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}
