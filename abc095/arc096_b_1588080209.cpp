/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author Kein Yukiyoshi
 */

#include "bits/stdc++.h"
#define int long long
#define FOR(i, a, b) for (int i = (int)(a); i < (int)(b); i++)
#define rep(i, n) for (int i = 0; i < (int)(n); i++)
#define ALL(obj) begin(obj), end(obj)
#define MAX(x) *max_element(ALL(x))
#define MIN(x) *min_element(ALL(x))
#define LOWER_BOUND(A, key) distance(A.begin(), lower_bound(ALL(A), key))
#define UPPER_BOUND(A, key) distance(A.begin(), upper_bound(ALL(A), key))

using namespace std;
using ll      = long long;
const int MOD = (int)(1e9 + 7);
const int INF = (int)(1e13 + 7);

int bpm(int x, unsigned int y) {
  if (x == 0) return 0;
  if (y == 0) return 1;
  int ans   = 1;
  int digit = (int)((log((double)y) / log((double)2) / 1 + 1));
  x %= MOD;
  for (unsigned int i = 0; i < digit; i++) {
    if (((y >> i) & 1u) == 1) ans = ans * x % MOD;
    x = x * x % MOD;
  }
  return ans;
}

class DStaticSushi {
public:
  static void solve(std::istream &cin, std::ostream &cout) {
    int N, C;
    cin >> N >> C;
    vector<int> x(N);
    vector<int> v(N);
    int ans = 0;
    rep(i, N) cin >> x[i] >> v[i];
    vector<int> cum_sum(N + 1);
    vector<int> cum_sum_inv(N + 1);
    rep(i, N) {
      cum_sum[i + 1] = v[i];
      cum_sum[i + 1] += cum_sum[i];
      cum_sum_inv[i + 1] = v[v.size() - 1 - i];
      cum_sum_inv[i + 1] += cum_sum_inv[i];
    }
    rep(i, N) {
      ans = max(ans, cum_sum[i + 1] - x[i]);
      ans = max(ans, cum_sum_inv[i + 1] - (C - x[N - 1 - i]));
      cum_sum[i + 1] -= 2 * x[i];
      cum_sum_inv[i + 1] -= 2 * (C - x[N - 1 - i]);
    }
    map<int, int> to;
    map<int, int> inv;
    rep(i, N) to[cum_sum[i + 1]] = i;
    rep(i, N - 1) {
      to.erase(cum_sum[N - i]);
      inv[cum_sum_inv[i + 1]] = i;
      ans                     = max(ans, max(to.rbegin()->first + inv.rbegin()->first + x[to.rbegin()->second], to.rbegin()->first + inv.rbegin()->first + (C - x[N - 1 - inv.rbegin()->second])));
    }
    cout << ans << endl;
  }
};


signed main() {
  DStaticSushi solver;
  std::istream& in(std::cin);
  std::ostream& out(std::cout);
  solver.solve(in, out);
  return 0;
}
