/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author Kein Yukiyoshi
 */

#include "bits/stdc++.h"
#define int long long
#define rep(i, n)           for (int i = 0; i < (int)(n); i++)
#define REP(i, a, b)        for (int i = (int)(a); i < (int)(b); i++)
#define FOR(i, a)           for (auto &i : a)
#define ALL(obj)            begin(obj), end(obj)
#define MAX(x)              *max_element(ALL(x))
#define MIN(x)              *min_element(ALL(x))
#define sum(x)              accumulate(ALL(x), 0LL)
#define LOWER_BOUND(A, key) distance(A.begin(), lower_bound(ALL(A), key))
#define UPPER_BOUND(A, key) distance(A.begin(), upper_bound(ALL(A), key))

using namespace std;
const int MOD    = (int)(1e9 + 7);
const int INF    = (int)(1e13 + 7);
const double EPS = 1e-14;
const double PI  = acos(-1);

int CEIL(int a, int b) { return (a >= 0 ? (a + (b - 1)) / b : (a - (b - 1)) / b); } //ceil() for int
int mod(int a, int b) { return a >= 0 ? a % b : a - (b * CEIL(a, b)); }             //always return positive num
int bpm(int a, int b) {                                                             //return x^y in order(log(y))
  int res = 1;
  for (a %= MOD; b; a = a * a % MOD, b >>= 1)
    if (b & 1) res = res * a % MOD;
  return res;
}

class ELeague {
public:
  static void solve(istream &cin, ostream &cout) {
    int N;
    cin >> N;
    vector<deque<int>> A(N, deque<int>(N - 1));
    rep(i, N) {
      rep(j, N - 1) {
        cin >> A[i][j];
        A[i][j]--;
      }
    }
    map<pair<int, int>, bool> one;
    deque<pair<int, int>> possible;
    rep(i, N) {
      pair<int, int> temp = {min(i, A[i][0]), max(i, A[i][0])};
      if (one[temp]) {
        one.erase(temp);
        possible.emplace_back(temp);
      } else {
        one[temp] = true;
      }
      A[i].pop_front();
    }
    int days = 0;
    int did  = 0;
    while (true) {
      days++;
      deque<int> task;
      while (possible.size()) {
        did++;
        task.emplace_back(possible[0].first);
        task.emplace_back(possible[0].second);
        possible.pop_front();
      }
      while (task.size()) {
        pair<int, int> temp = {min(task[0], A[task[0]][0]), max(task[0], A[task[0]][0])};
        A[task[0]].pop_front();
        if (one[temp]) {
          one.erase(temp);
          possible.emplace_back(temp);
        } else {
          one[temp] = true;
        }
        task.pop_front();
      }
      if (possible.empty()) break;
    }
    if (did != N * (N - 1) / 2) {
      cout << -1 << endl;
    } else {
      cout << days << endl;
    }
  }
};


signed main() {
  cin.tie(0);
  cout.tie(0);
  ios_base::sync_with_stdio(false);
  cout<<fixed<<setprecision(15);
  ELeague solver;
  std::istream& in(std::cin);
  std::ostream& out(std::cout);
  solver.solve(in, out);
  return 0;
}
