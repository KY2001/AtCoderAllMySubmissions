/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author Kein Yukiyoshi
 */

#include <bits/stdc++.h>
#define int long long
#define stoi                stoll
#define rep(i, n)           for (int i = 0; i < (int)(n); i++)         // [0, b)
#define rep2(i, a, b)       for (int i = (int)(a); i < (int)(b); i++)  // [a, b)
#define rep3(i, a, b)       for (int i = (int)(a); i >= (int)(b); i--) // reversed [b, a] so [a, a-1, a-2, ..., b]
#define FOR(i, a)           for (auto &i : a)
#define ALL(obj)            begin(obj), end(obj)
#define MAX(x)              *max_element(ALL(x))
#define MIN(x)              *min_element(ALL(x))
#define SUM(x)              accumulate(ALL(x), 0LL)
#define LOWER_BOUND(A, key) distance(A.begin(), lower_bound(ALL(A), key))
#define UPPER_BOUND(A, key) distance(A.begin(), upper_bound(ALL(A), key))

using namespace std;
const int MOD    = 1000000007;
const int INF    = (int)(1e13 + 7);
const double EPS = 1e-14;
const double PI  = acos(-1);

int CEIL(int a, int b) { return (a >= 0 ? (a + (b - 1)) / b : (a - (b - 1)) / b); } //ceil() for int
int mod(int a, int b) { return a >= 0 ? a % b : a - (b * CEIL(a, b)); }             //always return positive num
int pow_mod(int a, int b) {                                                         //return x^y in order(log(y))
  int res = 1;
  for (a %= MOD; b; a = a * a % MOD, b >>= 1)
    if (b & 1) res = res * a % MOD;
  return res;
}

class EQueenOnGrid {
public:
  static void solve(istream &cin, ostream &cout) {
    cin.tie(nullptr);
    cout.tie(nullptr);
    ios::sync_with_stdio(false);
    cout << fixed << setprecision(15);
    int H, W;
    cin >> H >> W;
    vector<string> S(H);
    rep(i, H) cin >> S[i];
    vector<vector<int>> row(H + 2, vector<int>(W + 2, 0));
    vector<vector<int>> column(H + 2, vector<int>(W + 2, 0));
    vector<vector<int>> naname(H + 2, vector<int>(W + 2, 0));
    vector<vector<int>> ans(H + 2, vector<int>(W + 2, 0));
    ans[1][1]    = 1;
    row[1][1]    = 1;
    column[1][1] = 1;
    naname[1][1] = 1;
    rep2(i, 1, H + 1) {
      rep2(j, 1, W + 1) {
        if (i == 1 and j == 1) continue;
        if (S[i - 1][j - 1] == '.') {
          ans[i][j]    = (row[i][j - 1] + column[i - 1][j] + naname[i - 1][j - 1]) % MOD;
          row[i][j]    = (ans[i][j] + row[i][j - 1]) % MOD;
          column[i][j] = (ans[i][j] + column[i - 1][j]) % MOD;
          naname[i][j] = (ans[i][j] + naname[i - 1][j - 1]) % MOD;
        } else {
          ans[i][j] = 0;
        }
      }
    }
    cout << mod(ans[H][W], MOD) << endl;
  }
};


signed main() {
  EQueenOnGrid solver;
  std::istream& in(std::cin);
  std::ostream& out(std::cout);
  solver.solve(in, out);
  return 0;
}
