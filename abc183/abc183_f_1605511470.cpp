/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author Kein Yukiyoshi
 */

#include <bits/stdc++.h>
#define int long long
#define stoi stoll
#define rep(i, n) for (int i = 0; i < (int)(n); i++)             // [0, b)
#define rep2(i, a, b) for (int i = (int)(a); i < (int)(b); i++)  // [a, b)
#define rep3(i, a, b) for (int i = (int)(a); i >= (int)(b); i--) // reversed [b, a] so [a, a-1, a-2, ..., b]
#define FOR(i, a) for (auto &i: a)
#define ALL(obj) begin(obj), end(obj)
#define MAX(x) *max_element(ALL(x))
#define MIN(x) *min_element(ALL(x))
#define SUM(x) accumulate(ALL(x), 0LL)
#define LOWER_BOUND(A, key) distance(A.begin(), lower_bound(ALL(A), key))
#define UPPER_BOUND(A, key) distance(A.begin(), upper_bound(ALL(A), key))

using namespace std;
const int MOD    = 998244353;
const int MOD2   = 1000000007;
const int INF    = (int)(1e13 + 7);
const double EPS = 1e-14;
const double PI  = acos(-1);

int CEIL(int a, int b) { return (a >= 0 ? (a + (b - 1)) / b : (a - (b - 1)) / b); } //ceil() for int
int mod(int a, int b) { return a >= 0 ? a % b : a - (b * CEIL(a, b)); }             //always return positive num
int pow_mod(int a, int b) {                                                         //return x^y in order(log(y))
  int res = 1;
  for (a %= MOD; b; a = a * a % MOD, b >>= 1)
    if (b & 1) res = res * a % MOD;
  return res;
}

struct UnionFind {
  vector<int> d;
  UnionFind(int n = 0): d(n, -1) {} //0からn-1
  int find(int x) { return (d[x] < 0 ? x : d[x] = find(d[x])); }
  bool unite(int x, int y) {
    x = find(x);
    y = find(y);
    if (x == y) return false;
    if (d[x] > d[y]) swap(x, y);
    d[x] += d[y];
    d[y] = x;
    return true;
  }
  bool same(int x, int y) { return find(x) == find(y); }
  int size(int x) { return -d[find(x)]; }
};

class FConfluence {
public:
  static void solve(istream &cin, ostream &cout) {
    cin.tie(nullptr);
    cout.tie(nullptr);
    ios::sync_with_stdio(false);
    cout << fixed << setprecision(15);
    int N, Q;
    cin >> N >> Q;
    vector<int> C(N);
    rep(i, N) cin >> C[i];
    vector<map<int, int>> check(N + 10);
    rep(i, N) {
      check[i + 1][C[i]] = 1;
    }
    UnionFind uf(N + 10);
    rep(i, Q) {
      int q;
      cin >> q;
      if (q == 2) {
        int x, y;
        cin >> x >> y;
        cout << check[uf.find(x)][y] << endl;
      } else {
        int a, b;
        cin >> a >> b;
        int A = uf.find(a);
        int B = uf.find(b);
        if (A == B) continue;
        uf.unite(a, b);
        if (uf.find(a) == A) {
          FOR(j, check[B]) {
            check[A][j.first] += j.second;
          }
          check[B] = {};
        } else {
          FOR(j, check[A]) {
            check[B][j.first] += j.second;
          }
          check[A] = {};
        }
      }
    }
  }
};

signed main() {
  FConfluence solver;
  std::istream &in(std::cin);
  std::ostream &out(std::cout);
  solver.solve(in, out);
  return 0;
}
