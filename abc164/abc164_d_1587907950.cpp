/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author Kein Yukiyoshi
 */

#include "bits/stdc++.h"
#define int long long
#define FOR(i, a, b) for (int i = (int)(a); i < (int)(b); i++)
#define rep(i, n) for (int i = 0; i < (int)(n); i++)
#define ALL(obj) begin(obj), end(obj)
#define MAX(x) *max_element(ALL(x))
#define MIN(x) *min_element(ALL(x))
#define LOWER_BOUND(A, key) distance(A.begin(), lower_bound(ALL(A), key))
#define UPPER_BOUND(A, key) distance(A.begin(), upper_bound(ALL(A), key))

using namespace std;
using ll      = long long;
const int MOD = (int)(1e9 + 7);
const int INF = (int)(1e13 + 7);

template <class T = int>
int in() {
  T x;
  cin >> x;
  return x;
}
int bpm(int x, int y) {
  if (x == 0)
    return 0;
  else if (y == 0) {
    return 1;
  }
  int ans = 1;
  x %= MOD;
  int digit = (int)((log((double)y) / log((double)2) / 1 + 1));
  for (int i = 0; i < digit; i++) {
    if (((y >> i) & 1u) == 1) {
      ans *= x;
      ans %= MOD;
    }
    x = x * x;
    x %= MOD;
  }
  return ans;
}

class DMultipleOf2019 {
public:
  static void solve(std::istream &cin, std::ostream &cout) {
    string S;
    cin >> S;
    vector<string> div1;
    vector<string> div2;
    int temp = 2019;
    for (int i = 1; temp * i <= 200000; i++) {
      string temp2 = to_string(temp * i);
      rep(j, temp2.size()) {
        if (temp2[j] == '0') {
          break;
        } else if (j == temp2.size() - 1 && temp2.size() == 5) {
          div1.emplace_back(temp2);
        }
      }
    }
    for (int i = 1; temp * i <= 200000; i++) {
      string temp2 = to_string(temp * i);
      rep(j, temp2.size()) {
        if (temp2[j] == '0') {
          break;
        } else if (j == 5) {
          div2.emplace_back(temp2);
        }
      }
    }
    int ans = 0;
    rep(i, S.size() - 4) {
      rep(j, div1.size()) {
        rep(k, div1[j].size()) {
          if (div1[j][k] != S[i + k]) {
            break;
          } else if (k == div1[j].size() - 1) {
            ans++;
          }
        }
      }
    }
    rep(i, S.size() - 5) {
      rep(j, div2.size()) {
        rep(k, div2[j].size()) {
          if (div2[j][k] != S[i + k]) {
            break;
          } else if (k == div2[j].size() - 1) {
            ans++;
          }
        }
      }
    }
    cout << ans << endl;
  }
};


signed main() {
  DMultipleOf2019 solver;
  std::istream& in(std::cin);
  std::ostream& out(std::cout);
  solver.solve(in, out);
  return 0;
}
