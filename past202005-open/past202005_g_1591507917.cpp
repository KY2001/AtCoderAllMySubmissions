/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author Kein Yukiyoshi
 */

#include "bits/stdc++.h"
#define int long long
#define rep(i, n)           for (int i = 0; i < (int)(n); i++)
#define REP(i, a, b)        for (int i = (int)(a); i < (int)(b); i++)
#define FOR(i, a)           for (auto &i : a)
#define ALL(obj)            begin(obj), end(obj)
#define MAX(x)              *max_element(ALL(x))
#define MIN(x)              *min_element(ALL(x))
#define LOWER_BOUND(A, key) distance(A.begin(), lower_bound(ALL(A), key))
#define UPPER_BOUND(A, key) distance(A.begin(), upper_bound(ALL(A), key))
#define Endl                endl

using namespace std;
const int MOD   = (int)(1e9 + 7);
const int INF   = (int)(1e13 + 7);
const double PI = acos(-1);

int CEIL(int a, int b) { return (a >= 0 ? (a + (b - 1)) / b : (a - (b - 1)) / b); } //ceil() for int
int mod(int a, int b) { return a >= 0 ? a % b : a - (b * CEIL(a, b)); }             //always return positive num
int bpm(int x, int y) {                                                             //return x^y in order(log(y))
  if (x == 0) return 0;
  if (y == 0) return 1;
  int ans   = 1;
  int digit = (int)((log((double)y) / log((double)2) / 1 + 1));
  x %= MOD;
  for (int i = 0; i < digit; i++) {
    if (((y >> i) & 1u) == 1) ans = ans * x % MOD;
    x = x * x % MOD;
  }
  return ans;
}
template <class T>
struct trio {
  T first{};
  T second{};
  T third{};
};
template <class T>
void cumulative_sum(T &container) {
  for (int i = 0; i < container.size() - 1; i++) container[i + 1] += container[i];
}

void DO(int x, int y, vector<vector<bool>> &grid, vector<vector<int>> &dis, deque<pair<int, int>> &pos, int now) {
  if (grid[y][x] == true and dis[y][x] > now + 1) {
    pos.emplace_back(y, x);
    dis[y][x] = now + 1;
  }
}

class G {
public:
  static void solve(istream &cin, ostream &cout) {
    int N, X, Y;
    cin >> N >> X >> Y;
    vector<vector<bool>> grid(409, vector<bool>(409, false));
    vector<vector<int>> dis(409, vector<int>(409, INF));
    REP(i, 1, 408) {
      REP(j, 1, 408) {
        grid[i][j] = true;
      }
    }
    rep(i, N) {
      int x, y;
      cin >> x >> y;
      grid[y + 204][x + 204] = false;
    }
    deque<pair<int, int>> pos = {{204, 204}};
    dis[204][204]             = 0;
    while (pos.size()) {
      int x, y;
      y = pos[0].first;
      x = pos[0].second;
      pos.pop_front();
      DO(x + 1, y + 1, grid, dis, pos, dis[y][x]);
      DO(x, y + 1, grid, dis, pos, dis[y][x]);
      DO(x - 1, y + 1, grid, dis, pos, dis[y][x]);
      DO(x + 1, y, grid, dis, pos, dis[y][x]);
      DO(x - 1, y, grid, dis, pos, dis[y][x]);
      DO(x, y - 1, grid, dis, pos, dis[y][x]);
    }
    if (dis[Y + 204][X + 204] == INF) {
      cout << -1 << endl;
    } else {
      cout << dis[Y + 204][X + 204] << endl;
    }
  }
};


signed main() {
  cin.tie(0);
  ios::sync_with_stdio(false);
  G solver;
  std::istream& in(std::cin);
  std::ostream& out(std::cout);
  solver.solve(in, out);
  return 0;
}
